@using BlazorServerTree.App.Services
@using BlazorServerTree.App.UIHelpers
@using System.Linq
@using System.Collections.Generic

@page "/tree"
@inject TreeDataService TreeService

<h1>Sample Tree</h1>

<p>Tree</p>

@if (uiTree.uiNodes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="input-group mb-3">
    <div class="input-group-prepend">
        <span class="input-group-text" id="basic-addon1">Selected Item</span>
    </div>
    <input type="text" class="form-control" 
           aria-label="SelectedText" aria-describedby="basic-addon1" 
           value="@selectedText" />
    </div>

    <UITreeComponent SourceData=@uiTree
                     SelectChangeDelegate=@OnSelectionChanged
                     LazyLoadNodesAsyncDelegate=@LoadNodes
                     UnExpandAsyncDelegate=@OnUnExpand
                     >
    </UITreeComponent>  

}

@functions {
    UITree uiTree = new UITree();
    private string selectedText {get; set;} = "";

    private async Task<bool> OnExpand(int Id)
    {
         System.Console.WriteLine("Expanded " + Id);
         return await Task.FromResult(true);
    }

    private async Task<bool> OnUnExpand(int Id)
    {
        System.Console.WriteLine("Un Expanded " + Id) ;
         return await Task.FromResult(true);
    }

    private void OnSelectionChanged(UIMouseEventArgs e, int? Id ) {
        if (Id != null ){
            selectedText = (uiTree.uiNodes.Where(x=>x.Id == Id).Select(x=>x.Text).FirstOrDefault());
        } else {
            selectedText = "No selection";
        }
        System.Console.WriteLine("Selected " + Id + " " + selectedText + " Total nodes " + uiTree.uiNodes.Count()) ;
        StateHasChanged();
    }

    protected override async Task OnInitAsync()
    {
        uiTree.uiNodes = await LoadNodes();
        uiTree.ReArrange( );
    }

    private async Task<List<UITreeNode>> LoadNodes(int? ParentId = null)
    {
        //Load tree from 'database'
        TreeNode[] newNodes = await TreeService.GetNodesAsync(ParentId);
        //Transform 'database' data to 'UI' data
        List<UITreeNodeAction> RandomActions = new List<UITreeNodeAction>() {
                  new UITreeNodeAction { Name = "Refresh" },
                  new UITreeNodeAction { Name = "Edit", IsEsabled = false }
            };
        List<UITreeNode> uiNewNodes = newNodes
                                      .Where(x=>x.ParentId==ParentId)
                                      .Select( x=>new UITreeNode { ParentId=x.ParentId, 
                                                                   Id=x.Id, Text=x.Label,
                                                                   Actions = RandomActions  } )
                                      .ToList();
        //todo: avoid to dup the list in both sides ( component and here )

        return uiNewNodes;
    }

}